[tool:pytest]
# Test discovery and execution
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --durations=10
    --cov=ccscv
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=95

# Test markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    mathematical: marks tests as mathematical validation tests
    surface_code: marks tests as surface code validation tests
    decoder: marks tests as decoder validation tests
    homology: marks tests as homology computation tests
    benchmark: marks tests as performance benchmarks
    memory: marks tests as memory profiling tests
    large: marks tests as large-scale tests
    scalability: marks tests as scalability tests
    critical: marks tests as critical mathematical validation tests

# Hypothesis configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:hypothesis.*

# Coverage configuration
[coverage:run]
source = ccscv
omit = 
    */tests/*
    */examples/*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Hypothesis profiles
[tool.hypothesis]
# Default profile
verbosity = normal
max_examples = 100
deadline = 5000
stateful_step_count = 50

# CI profile for deterministic testing
[tool.hypothesis.profiles.ci]
verbosity = normal
max_examples = 50
deadline = 10000
stateful_step_count = 25
database_file = ":memory:"
derandomize = true

# Development profile for faster iteration
[tool.hypothesis.profiles.dev]
verbosity = normal
max_examples = 20
deadline = 2000
stateful_step_count = 10

# Debug profile for detailed analysis
[tool.hypothesis.profiles.debug]
verbosity = verbose
max_examples = 10
deadline = 30000
stateful_step_count = 5
show_initial_examples = true
